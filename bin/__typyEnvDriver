#!/usr/bin/env python
from __future__ import print_function
from typyEnv.Package import Package
from typyEnv.Environment import Environment
from typyEnv.PathMod import PathMod
import argparse
import os


parser = argparse.ArgumentParser()
parser.add_argument('packages',type=str,nargs="*")
parser.add_argument('--json',type=str,default='')
parser.add_argument('--dev',action='store_true')

group = parser.add_mutually_exclusive_group(required=True)
group.add_argument('--swap',action='store_true')
group.add_argument('--add',action='store_true')
group.add_argument('--remove',action='store_true')
group.add_argument('--reset',action='store_true')
group.add_argument('--list',action='store_true')

args = parser.parse_args()

try:
  loaded_pkgs = os.environ['TYPYENV_LOADED_PKGS']
except KeyError:
  print('==> Error! TYPYENV_LOADED_PKGS not set!')
  exit(1)

if loaded_pkgs:
    loaded_pkgs = loaded_pkgs.strip().split(':')
else:
    loaded_pkgs = []

if not args.json:
  try:
    json = os.environ['TYPYENV_JSON_PREFIX']
  except KeyError:
    print('==> Error! TYPYENV_JSON_PREFIX needs to be set or')
    print('--> the --json parameter needs to be passed to typyEnv.')
    exit(1)
else:
  json = args.json

if args.list:
  print('{:15s} {:15s}'.format('PACKAGE','VERSION'))
  print('{:15s} {:15s}'.format('=======','======='))
  if loaded_pkgs:
    for pkg in loaded_pkgs:
      pkgSPec = pkg.split('/')
      print('{:15s} {:15s}'.format(*(pkg.split('/'))))
  else:
    print('No loaded packages!')
  exit(1)


depList = []
if args.reset:
  if loaded_pkgs:
    depList.extend(loaded_pkgs)
  else:
    print('--> No loaded packages!')
    exit(0)
  args.remove = True
else:
  depList.extend(args.packages)

pkgList = []
allDone=False
while not allDone:
  pkgSpec = depList.pop(0).split("/")
  pkgName = pkgSpec[0]
  try:
    pkgVersion = pkgSpec[1]
  except IndexError:
    pkgVersion = None
  pkg = Package(json,pkgName)
  print("J,pN,pV",json,pkgName,pkgVersion)
  pkg.read(pkgVersion)
  pkgList.append(pkg)
  depList.extend(pkg.dependencies)
  if not depList:
    allDone=True

env = Environment()
for pkg in reversed(pkgList):
  if args.swap:
    for loadedPkgSpec in loaded_pkgs:
        loadedPkgName,loadedPkgVersion = loadedPkgSpec.split("/")
        if loadedPkgName == pkg.pkg_name:
            loadedPkg = Package(json,loadedPkgName)
            loadedPkg.read(loadedPkgVersion)
            env.remove_package(loadedPkg)
            mod = PathMod(name='TYPYENV_LOADED_PKGS',action='remove',value=loadedPkgSpec)
            env.mod_path(mod)
    action = 'append'
    env.add_package(pkg,export_dev_paths=args.dev)
  elif args.add:
    action = 'append'
    env.add_package(pkg,export_dev_paths=args.dev)
  elif args.remove:
    action = 'remove'
    env.remove_package(pkg)
  pkgSpec = pkg.pkg_name + '/' + pkg.version
  mod = PathMod(name='TYPYENV_LOADED_PKGS',action=action,value=pkgSpec)
  env.mod_path(mod)

dev_str,variables_str,export_str = env.export(export_dev_paths=args.dev)

if dev_str:
  print('[[DEV]]')
  print(dev_str)
print('[[VARIABLES]]')
print(variables_str)
print('[[EXPORT]]')
print(export_str)
